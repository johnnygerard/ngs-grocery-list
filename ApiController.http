### Register
POST http://localhost:8080/api/register
Content-Type: application/x-www-form-urlencoded

username = {{$random.alphabetic(10)}} &
password = {{$random.alphanumeric(10)}}

> {%
    import {assertContentType, assertStatus} from 'httpClient';

    client.test('Register', () => {
        assertStatus(200);
        assertContentType('text/plain');

        // Store the JWT for authenticated requests.
        client.global.set('jwt', response.body);
    });
%}

### Add product
< {%
    client.global.set('product1', '{"name": "APPLES","quantity": 5}');
%}

POST http://localhost:8080/api/products
Authorization: Bearer {{jwt}}
Content-Type: application/json

{{product1}}

> {%
    import {assertNotNull, assertStatus, assertEmptyBody} from 'httpClient';

    client.test('Add product', () => {
        assertStatus(201);
        assertEmptyBody();

        const location = response.headers.valueOf('Location');
        assertNotNull(location, 'Location header is not set');

        const result = /\/api\/products\/(\d+)/.exec(location);
        assertNotNull(result, 'Invalid Location header');

        client.global.set('product1_id', result[1]);
    });
%}

### Get all products
http://localhost:8080/api/products
Authorization: Bearer {{jwt}}

> {%
    import {assertJsonBody, assertStatus} from 'httpClient';

    client.test('Get all products', () => {
        const product1 = JSON.parse(client.global.get('product1'));
        product1.id = parseInt(client.global.get('product1_id'));

        assertStatus(200);
        assertJsonBody([product1]);
    });
%}
