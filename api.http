# This file contains integration tests for the backend (API + database).

### Initialize global variables (using a dummy request)
< {%
    client.global.set('product1', '{"name": "APPLES","quantity": 5}');
    client.global.set('product2', '{"name": "BEEF","quantity": 10}');
%}
    {{BASE_URL}}

### Register
POST {{BASE_URL}}/register
Content-Type: application/x-www-form-urlencoded

username = {{$random.alphabetic(10)}} &
password = {{$random.alphanumeric(10)}}

> {%
    import {assertContentType, assertStatus} from 'httpClient';

    client.test('Register', () => {
        assertStatus(200);
        assertContentType('text/plain');

        // Store the JWT for authenticated requests.
        client.global.set('jwt', response.body);
    });
%}

### Register another user
POST {{BASE_URL}}/register
Content-Type: application/x-www-form-urlencoded

username = {{$random.alphabetic(10)}} &
password = {{$random.alphanumeric(10)}}

> {%
    client.global.set('jwt2', response.body);
%}

### Add product
POST {{BASE_URL}}/products
Authorization: Bearer {{jwt}}
Content-Type: application/json

{{product1}}

> {%
    import {assertNotNull, assertStatus, assertEmptyBody} from 'httpClient';

    client.test('Add product', () => {
        assertStatus(201);
        assertEmptyBody();

        const location = response.headers.valueOf('Location');
        assertNotNull(location, 'Location header is not set');

        const result = /\/api\/products\/(\d+)/.exec(location);
        assertNotNull(result, 'Invalid Location header');

        client.global.set('product1_id', result[1]);
    });
%}

### Get all products
{{BASE_URL}}/products
Authorization: Bearer {{jwt}}

> {%
    import {assertJsonBody, assertStatus} from 'httpClient';

    client.test('Get all products', () => {
        const product1 = JSON.parse(client.global.get('product1'));
        product1.id = parseInt(client.global.get('product1_id'));

        assertStatus(200);
        assertJsonBody([product1]);
    });
%}

### Delete all products
DELETE {{BASE_URL}}/products
Authorization: Bearer {{jwt}}

> {%
    import {assertEmptyBody, assertStatus} from 'httpClient';

    client.test('Delete all products', () => {
        assertStatus(204);
        assertEmptyBody();
    });
%}

### Get all products (empty)
{{BASE_URL}}/products
Authorization: Bearer {{jwt}}

> {%
    import {assertJsonBody, assertStatus} from 'httpClient';

    client.test('Get all products', () => {
        assertStatus(200);
        assertJsonBody([]);
    });
%}

### Add product (setup for next test)
POST {{BASE_URL}}/products
Authorization: Bearer {{jwt}}
Content-Type: application/json

{{product1}}

> {%
    const location = response.headers.valueOf('Location');
    const result = /\/api\/products\/(\d+)/.exec(location);
    client.global.set('product1_id', result[1]);
%}

### Delete one product (unauthorized)
DELETE {{BASE_URL}}/products/{{product1_id}}
Authorization: Bearer {{jwt2}}

> {%
    import {assertEmptyBody, assertStatus} from 'httpClient';

    client.test('Delete one product (unauthorized)', () => {
        assertStatus(404);
        assertEmptyBody();
    });
%}

### Delete one product
DELETE {{BASE_URL}}/products/{{product1_id}}
Authorization: Bearer {{jwt}}

> {%
    import {assertEmptyBody, assertStatus} from 'httpClient';

    client.test('Delete one product', () => {
        assertStatus(204);
        assertEmptyBody();
    });
%}

### Add product (setup for next test)
POST {{BASE_URL}}/products
Authorization: Bearer {{jwt}}
Content-Type: application/json

{{product1}}

> {%
    const location = response.headers.valueOf('Location');
    const result = /\/api\/products\/(\d+)/.exec(location);
    client.global.set('product1_id', result[1]);
%}

### Update a product's quantity
PATCH {{BASE_URL}}/products/{{product1_id}}
Authorization: Bearer {{jwt}}
Content-Type: application/x-www-form-urlencoded

quantity = {{product1_quantity}}

> {%
    import {assertEmptyBody, assertStatus} from 'httpClient';

    client.test('Update a product\'s quantity', () => {
        assertStatus(204);
        assertEmptyBody();
    });
%}
